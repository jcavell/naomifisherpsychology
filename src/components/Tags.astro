---
import { makeUrl } from "../scripts/url";
import { umbrellaTags, coreTags, forTags, ageTags } from "../scripts/tags";

const { tags = [], uri = "tags" } = Astro.props;

// Combine umbrella and core tags and make unique
const coreAndUmbrellaTags = [
  ...new Set(coreTags.concat(Array.from(umbrellaTags.keys()))),
];
//console.log("Core and synonym tags: " + coreAndSynonymTags);

const includedCoreTags = tags.filter((t) => coreAndUmbrellaTags.includes(t));
const includedAgeTags = tags.filter((t) => ageTags.includes(t));
const includedForTags = tags.filter((t) => forTags.includes(t));
---

{
  includedCoreTags.length > 0 && (
    <span class="tags">
      {includedCoreTags.map((tag: string, index: number) => (
        <>
          <a href={`/${uri}/${makeUrl(tag)}`}>{tag}</a>
          {includedCoreTags.length > index + 1 && <>, </>}
        </>
      ))}
    </span>
  )
}

{
  includedAgeTags.length > 0 && (
    <span class="tags">
      Ages:
      {includedAgeTags.map((tag: string, index: number) => (
        <>
          <a href={`/${uri}/${makeUrl(tag)}`}>{tag}</a>
          {includedAgeTags.length > index + 1 && <>, </>}
        </>
      ))}
    </span>
  )
}

{
  includedForTags.length > 0 && (
    <span class="tags">
      Audience:
      {includedForTags.map((tag: string, index: number) => (
        <>
          <a href={`/${uri}/${makeUrl(tag)}`}>{tag}</a>
          {includedForTags.length > index + 1 && <>, </>}
        </>
      ))}
    </span>
  )
}
