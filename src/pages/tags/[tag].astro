---
import getWebinars from "../../scripts/webinars";
import getCourses from "../../scripts/courses";
import { getWebinarMeta } from "../../scripts/webinarMeta";
import { getCourseMetaFromTitle } from "../../scripts/courseMeta";

import { makeUrl } from "../../scripts/url";
import { allTags } from "../../scripts/tags";

import WebinarSummary from "../../components/webinar/WebinarSummary.astro";
import CourseSummary from "../../components/course/CourseSummary.astro";
import BlogSummary from "../../components/blog/BlogSummary.astro";
import BookSummary from "../../components/book/BookSummary.astro";

import { getOrderedPosts } from "../../scripts/blog";

import { getCollection } from "astro:content";
import TagLayout from "../../layouts/TagLayout.astro";

import { umbrellaTags } from "../../scripts/tags";

export async function getStaticPaths() {
  // Get ALL content
  const webinars = await getWebinars();
  const courses = await getCourses();
  const posts = await getOrderedPosts();
  const books = await getCollection("books");

  function getAllResources(tags: string[]) {
    const filteredWebinars = webinars.filter((webinar) => {
      const eventId = webinar.id;
      const meta = getWebinarMeta(eventId);
      return meta?.tags?.some((e) => tags.includes(e));
    });

    const filteredCourses = courses.filter((course) => {
      const meta = getCourseMetaFromTitle(course.data.title);
      // console.log("Course tags for " + course.data.title + ": " + meta?.tags);
      return meta?.tags?.some((e) => tags.includes(e));
    });

    const filteredBooks = books.filter((book) =>  
      book.data.tags.some((e) => tags.includes(e))
    );

    const filteredPosts = posts.filter((post) =>
      post.data.tags?.some((e) => tags.includes(e))
    );

    return {
      filteredWebinars: filteredWebinars,
      filteredBooks: filteredBooks,
      filteredCourses: filteredCourses,
      filteredPosts: filteredPosts,
    };
  }

  return allTags.map((tag: string) => {
    const { filteredWebinars, filteredCourses, filteredBooks, filteredPosts } =
      umbrellaTags.has(tag)
        ? getAllResources([tag].concat(Array.from(umbrellaTags.get(tag))))
        : getAllResources([tag]);


    // Sort courses depending on where tag appears
    filteredCourses.sort(function (a, b) {
      const tagUpper = tag.toUpperCase();
      if (
        a.data.title.toUpperCase().indexOf(tagUpper) !== -1 &&
        b.data.title.toUpperCase().indexOf(tagUpper) === -1
      ) {
        // In B's title but not A's - sort B first
        return -1;
      }
      if (
        a.data.description.toUpperCase().indexOf(tagUpper) !== -1 &&
        b.data.description.toUpperCase().indexOf(tagUpper) === -1
      ) {
        // In B's description but not A's - sort B first
        return -1;
      }
      // sort A first
      return 1;
    });

    // console.log("**" + tag + "** " + filteredCourses.map((course) => course.data.title));

    return {
      params: { tag: makeUrl(tag) },
      props: {
        tagName: tag,
        webinars: filteredWebinars,
        courses: filteredCourses,
        books: filteredBooks,
        posts: filteredPosts,
      },
    };
  });
}

const { tagName, webinars, courses, books, posts } = Astro.props;

// console.log("WEBINARS: " + webinars.length);
---

<TagLayout
  tag={tagName}
  webinars={webinars}
  courses={courses}
  books={books}
  posts={posts}
>
  {
    webinars.length > 0 && (
      <a name="webinars">
        <h2>Webinars</h2>
      </a>
    )
  }
  {webinars.map((webinar, index) => <WebinarSummary webinar={webinar} />)}

  {
    courses.length > 0 && (
      <a name="courses">
        {" "}
        <h2>Courses</h2>
      </a>
    )
  }
  {courses.map((course) => <CourseSummary course={course.data} />)}

  {
    courses.length > 0 && (
      <a name="books">
        <h2>Books</h2>
      </a>
    )
  }
  {books.map((book) => <BookSummary book={book.data} />)}

  {
    posts.length > 0 && (
      <a name="blog">
        <h2>Blog articles</h2>
      </a>
    )
  }
  {posts.map((post) => <BlogSummary post={post.data} />)}
</TagLayout>
