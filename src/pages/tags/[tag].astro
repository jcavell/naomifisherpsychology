---
import getWebinars from "../../scripts/webinars";
import getCourses from "../../scripts/courses";
import { getWebinarMeta } from "../../scripts/webinarMeta";
import { getCourseMetaFromTitle } from "../../scripts/courseMeta";

import { makeUrl } from "../../scripts/url";
import { allTags } from "../../scripts/tags";

import WebinarSummary from "../../components/webinar/WebinarSummary.astro";
import CourseSummary from "../../components/course/CourseSummary.astro";
import BlogSummary from "../../components/blog/BlogSummary.astro";
import BookSummary from "../../components/book/BookSummary.astro";

import { getOrderedPosts } from "../../scripts/blog";

import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { umbrellaTags } from "../../scripts/tags";

export async function getStaticPaths() {
  // Get ALL content
  const webinars = await getWebinars();
  const courses = await getCourses();
  const posts = await getOrderedPosts();
  const books = await getCollection("books");

  function getAllResources(tags: string[]) {
    const filteredWebinars = webinars.filter((webinar) => {
      const eventId = webinar.id;
      const meta = getWebinarMeta(eventId);
      return meta?.tags?.some((e) => tags.includes(e));
    });

    const filteredCourses = courses.filter((course) => {
      const meta = getCourseMetaFromTitle(course.data.title);
      // console.log("Course tags for " + course.data.title + ": " + meta?.tags);
      return meta?.tags?.some((e) => tags.includes(e));
    });

    const filteredBooks = books.filter((book) =>
      book.data.tags.some((e) => tags.includes(e))
    );

    const filteredPosts = posts.filter((post) =>
      post.data.tags?.some((e) => tags.includes(e))
    );

    return {
      filteredWebinars: filteredWebinars,
      filteredBooks: filteredBooks,
      filteredCourses: filteredCourses,
      filteredPosts: filteredPosts,
    };
  }

  return allTags.map((tag: string) => {
    const { filteredWebinars, filteredCourses, filteredBooks, filteredPosts } =
      umbrellaTags.has(tag)
        ? getAllResources([tag].concat(Array.from(umbrellaTags.get(tag))))
        : getAllResources([tag]);

    // Sort courses depending on where tag appears
    filteredCourses.sort(function (a, b) {
      const tagUpper = tag.toUpperCase();
      if (
        a.data.title.toUpperCase().indexOf(tagUpper) !== -1 &&
        b.data.title.toUpperCase().indexOf(tagUpper) === -1
      ) {
        // In B's title but not A's - sort B first
        return -1;
      }
      if (
        a.data.description.toUpperCase().indexOf(tagUpper) !== -1 &&
        b.data.description.toUpperCase().indexOf(tagUpper) === -1
      ) {
        // In B's description but not A's - sort B first
        return -1;
      }
      // sort A first
      return 1;
    });

    // console.log("**" + tag + "** " + filteredCourses.map((course) => course.data.title));

    return {
      params: { tag: makeUrl(tag) },
      props: {
        tagUrl: makeUrl(tag),
        tagName: tag,
        webinars: filteredWebinars,
        courses: filteredCourses,
        books: filteredBooks,
        posts: filteredPosts,
      },
    };
  });
}

const { tagName, tagUrl, webinars, courses, books, posts } = Astro.props;

// console.log("WEBINARS: " + webinars.length);
---

<BaseLayout tagUrl={tagUrl} tagName={tagName}>
  <div class="page-intro-wrapper">
    <div class="page-intro-image">
      <img
        srcset="imgs/page-image-620.jpg 620w, imgs/page-image-1080.jpg 1080w"
        sizes="(min-width: 1200px) 520px, (min-width: 780px) 780px, 100vw"
        src="imgs/page-image-620.jpg.jpg"
        alt="an image description for the visually impaired, also helps SEO"
      />
    </div>
    <div class="page-intro-text">
      <p>
        <strong>{tagName}</strong> is lorem ipsum dolor sit amet, consectetur adipiscing
        elit. Quisque eu purus non metus vestibulum imperdiet et et velit. Aliquam
        laoreet ipsum non risus dapibus malesuada. Mauris semper elit eget mi tristique,
        id bibendum est rhoncus. Etiam vehicula ex id eleifend posuere. Sed sollicitudin
        lorem quis enim scelerisque, quis cursus mi placerat. Nulla eget pellentesque
        felis. Curabitur fermentum mi sem, ac tristique risus feugiat eget. Donec
        quis bibendum nibh. Nulla facilisi. Mauris lacinia dolor laoreet libero aliquam,
        quis euismod turpis interdum.
      </p>
      <p>
        Donec elit nulla, dictum eu odio fermentum, rhoncus commodo lectus. Duis
        sed magna non mi hendrerit convallis eu ut diam. Nullam maximus sem in
        mi bibendum vehicula. Donec facilisis libero sit amet velit faucibus
        tempor. Quisque ac mattis dolor. Curabitur aliquam imperdiet sem ac
        sagittis. Class aptent taciti sociosqu ad litora torquent per conubia
        nostra, per inceptos himenaeos. Sed at volutpat nunc, sit amet accumsan
        nisi. Pellentesque enim ipsum, tincidunt sed vehicula vel, vestibulum
        quis est.
      </p>
    </div>
  </div>

  <div class="info-section-wrapper">
    <div class="info-text">
      <p>
        You can click one of these buttons to jump to webinars, courses, books
        or blog posts about <strong>{tagName}</strong>:
      </p>
    </div>
    <div class="info-links">
      <a href="#webinars" class="filter-webinars"> Webinars: {tagName}</a>
      <a href="#courses" class="filter-courses"> Courses: {tagName} </a>
      <a href="#books" class="filter-books"> Books: {tagName} </a>
      <a href="#blog" class="filter-blog"> Blog: {tagName} </a>
    </div>
  </div>

  {
    webinars.length > 0 && (
      <a name="webinars" class="anchor">
        <h2 class="section-title">
          <span class="webinars-section-title">Webinars:</span> {tagName}
        </h2>
      </a>
    )
  }
  {webinars.map((webinar, index) => <WebinarSummary webinar={webinar} />)}

  {
    courses.length > 0 && (
      <a name="courses" class="anchor">
        <h2 class="section-title">
          <span class="courses-section-title">Courses:</span> {tagName}
        </h2>
      </a>
    )
  }
  {courses.map((course) => <CourseSummary course={course.data} />)}

  {
    courses.length > 0 && (
      <a name="books" class="anchor">
        <h2 class="section-title">
          <span class="books-section-title">Books:</span> {tagName}
        </h2>
      </a>
    )
  }
  {books.map((book) => <BookSummary book={book.data} />)}

  {
    posts.length > 0 && (
      <a name="blog" class="anchor">
        <h2 class="section-title">
          <span class="blog-section-title">Blog posts:</span> {tagName}
        </h2>
      </a>
    )
  }
  {posts.map((post) => <BlogSummary post={post.data} />)}
</BaseLayout>
