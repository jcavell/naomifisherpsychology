---
import getWebinars from "../../scripts/webinars";
import getCourses from "../../scripts/courses";

import {
  getCategoryPosts,
  getTaggedBooks,
  getTaggedCourses,
  getTaggedPosts,
  getTaggedWebinars,
} from "../../scripts/getTaggedResources";

import { makeUrl } from "../../scripts/url";
import { allTags, ageTags, forTags, topicTags } from "../../scripts/tags";

import WebinarSummary from "../../components/webinar/WebinarSummary.astro";
import CourseSummary from "../../components/course/CourseSummary.astro";
import BlogSummary from "../../components/blog/BlogSummary.astro";
import BookSummary from "../../components/book/BookSummary.astro";

import { getOrderedPosts } from "../../scripts/blog";

import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import DisplayTagContent from "../../components/DisplayTagContent.astro";

import Picture from "astro/components/Picture.astro";

import { getTagMeta } from "../../scripts/tagMeta";

export async function getStaticPaths() {
  // Get ALL content
  const webinars = await getWebinars();
  const courses = await getCourses();
  const posts = await getOrderedPosts();

  // Sort newest book first
  const books = (await getCollection("books")).sort(
    (a, b) => b.data.id - a.data.id,
  );

  function getAllResources(tags: string[]) {
    const taggedWebinars = getTaggedWebinars(webinars, tags);
    const taggedCourses = getTaggedCourses(courses, tags);
    const taggedBooks = getTaggedBooks(books, tags);

    // A bit hacky - see if there are curated (in tagMeta) category posts for the first tag
    // if there are - use these instead of the automated tag ones
    const tagMeta = getTagMeta(tags[0]);
    let taggedPosts;
    if (tagMeta?.substackURLs) {
      taggedPosts = getCategoryPosts(posts, tagMeta.substackURLs);
    } else {
      taggedPosts = getTaggedPosts(posts, tags).slice(0, 4);
    }

    const first2Posts = taggedPosts.slice(0, 2);
    const restOfPosts = taggedPosts.slice(2, 6);

    return {
      taggedWebinars: taggedWebinars,
      taggedBooks: taggedBooks,
      taggedCourses: taggedCourses,
      first2Posts: first2Posts,
      restOfPosts: restOfPosts,
    };
  }

  return allTags.map((tag: string) => {
    const {
      taggedWebinars,
      taggedCourses,
      taggedBooks,
      first2Posts,
      restOfPosts,
    } = getAllResources([tag]);

    //  console.log("**" + tag + "** " + taggedCourses.map((course) => course.data.title));

    return {
      params: { tag: makeUrl(tag) },
      props: {
        tagUrl: makeUrl(tag),
        tagName: tag,
        webinars: taggedWebinars,
        courses: taggedCourses,
        books: taggedBooks,
        firstTwoPosts: first2Posts,
        restOfPosts: restOfPosts,
      },
    };
  });
}

const {
  tagName,
  tagUrl,
  webinars,
  courses,
  books,
  firstTwoPosts,
  restOfPosts,
} = Astro.props;

const hasWebinars = webinars.length > 0;
const hasCourses = courses.length > 0;
const hasBooks = books.length > 0;
const hasPosts = firstTwoPosts.length > 0;

const numberCategories = [hasWebinars, hasCourses, hasBooks, hasPosts].filter(
  (r) => r,
).length;

const aimedAtText = forTags.includes(tagName)
  ? "for"
  : ageTags.includes(tagName)
    ? "about children aged "
    : "on";

// console.log("WEBINARS: " + webinars.length);

const metaDescription =
  "Dr. Naomi Fisher's webinars, courses and books " +
  aimedAtText +
  " " +
  tagName;
---

<style>
    .accordion-wrapper .panel {
        display: flex;
        flex-wrap: wrap;
        gap: 16px;              /* spacing between cards */
        align-items: stretch;
        /* optionally ensure padding / border don't reduce available space */
        box-sizing: border-box;
    }

    .accordion-wrapper .panel > * { /* target each BlogSummary root */
        flex: 0 1 calc(50% - 8px);   /* two per row, accounting for half of gap */
        box-sizing: border-box;
        min-width: 0;                /* allow shrinking inside flex containers */
    }

</style>

<BaseLayout tagUrl={tagUrl} tagName={tagName} metaDescription={metaDescription}>
  <!--{-->
  <!--  numberCategories > 1 && (-->
  <!--    <div class="info-section-wrapper">-->
  <!--      <div class="info-text">-->
  <!--        <p>-->
  <!--          Click on a button to jump to our webinars, courses, books or blog-->
  <!--          posts-->
  <!--          {aimedAtText}-->
  <!--          <strong>{tagName}</strong>-->
  <!--        </p>-->
  <!--      </div>-->
  <!--      <div class="info-links">-->
  <!--        {hasPosts && (-->
  <!--          <a href="#blog" class="filter-blog">-->
  <!--            Articles-->
  <!--          </a>-->
  <!--        )}-->

  <!--        {hasBooks && (-->
  <!--          <a href="#books" class="filter-books">-->
  <!--            Books-->
  <!--          </a>-->
  <!--        )}-->

  <!--        {hasWebinars && (-->
  <!--          <a href="#webinars" class="filter-webinars">-->
  <!--            Webinars-->
  <!--          </a>-->
  <!--        )}-->
  <!--        {hasCourses && (-->
  <!--          <a href="#courses" class="filter-courses">-->
  <!--            Courses-->
  <!--          </a>-->
  <!--        )}-->

  <!--      </div>-->
  <!--    </div>-->
  <!--  )-->
  <!--}-->

  <DisplayTagContent tagName={tagName} />

  {
    firstTwoPosts.length > 0 && (
      <a name="blog" class="anchor">
        <h2 class="section-title">
          <span class="blog-section-title">Posts</span>{" "}
        </h2>
      </a>
    )
  }
  {firstTwoPosts.map((post) => <BlogSummary post={post.data} hideDate={true} />)}

  {
    restOfPosts.length > 0 && (
      <div class="accordion-wrapper">
        <button class="accordion no-title-accordion">More Posts</button>
        <div class="panel">
          {restOfPosts.map((post) => (
            <BlogSummary post={post.data} hideDate={true}/>
          ))}
        </div>
      </div>
    )
  }

  {
    books.length > 0 && (
      <a name="books" class="anchor">
        <h2 class="section-title">
          <span class="books-section-title">Books</span>
        </h2>
      </a>
    )
  }
  {books.map((book) => <BookSummary book={book.data} />)}

  {
    webinars.length > 0 && (
      <a name="webinars" class="anchor">
        <h2 class="section-title">
          <span class="webinars-section-title">Webinars</span>
        </h2>
      </a>
    )
  }
  {webinars.map((webinar, index) => <WebinarSummary webinar={webinar} />)}

  <!--{-->
  <!--  courses.length > 0 && (-->
  <!--    <a name="courses" class="anchor">-->
  <!--      <h2 class="section-title">-->
  <!--        <span class="courses-section-title">Courses</span>-->
  <!--      </h2>-->
  <!--    </a>-->
  <!--  )-->
  <!--}-->
  <!--{courses.slice(0,4).map((course) => <CourseSummary course={course.data} />)}-->

  <!-- <a href={`/courses/categories/${tagUrl}`} class="load-more"> See {tagName} Courses </a> -->
</BaseLayout>
