---
import getWebinars from "../../scripts/webinars";
import getCourses from "../../scripts/courses";
import { getWebinarMeta } from "../../scripts/webinarMeta";
import { getCourseMetaFromTitle } from "../../scripts/courseMeta";

import { makeUrl } from "../../scripts/url";
import { allTags, ageTags, forTags, topicTags } from "../../scripts/tags";

import WebinarSummary from "../../components/webinar/WebinarSummary.astro";
import CourseSummary from "../../components/course/CourseSummary.astro";
import BlogSummary from "../../components/blog/BlogSummary.astro";
import BookSummary from "../../components/book/BookSummary.astro";

import { getOrderedPosts } from "../../scripts/blog";

import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { umbrellaTags } from "../../scripts/tags";
import { getTagMeta } from "../../scripts/tagMeta";
import Picture from "astro/components/Picture.astro";

export async function getStaticPaths() {
  // Get ALL content
  const webinars = await getWebinars();
  const courses = await getCourses();
  const posts = await getOrderedPosts();
  const books = await getCollection("books");

  function getAllResources(tags: string[]) {
    const filteredWebinars = webinars.filter((webinar) => {
      const eventId = webinar.id;
      const meta = getWebinarMeta(eventId);
      return meta?.tags?.some((e) => tags.includes(e));
    });

    const filteredCourses = courses.filter((course) => {
      const meta = getCourseMetaFromTitle(course.data.title);
      // console.log("Course tags for " + course.data.title + ": " + meta?.tags);
      return meta?.tags?.some((e) => tags.includes(e));
    });

    const filteredBooks = books.filter((book) =>
      book.data.tags.some((e) => tags.includes(e))
    );

    const filteredPosts = posts.filter((post) =>
      post.data.tags?.some((e) => tags.includes(e))
    );

    return {
      filteredWebinars: filteredWebinars,
      filteredBooks: filteredBooks,
      filteredCourses: filteredCourses,
      filteredPosts: filteredPosts,
    };
  }

  return allTags.map((tag: string) => {
    const { filteredWebinars, filteredCourses, filteredBooks, filteredPosts } =
      umbrellaTags.has(tag)
        ? getAllResources([tag].concat(Array.from(umbrellaTags.get(tag))))
        : getAllResources([tag]);

    // Sort courses depending on where tag appears
    filteredCourses.sort(function (a, b) {
      const tagUpper = tag.toUpperCase();
      if (
        a.data.title.toUpperCase().indexOf(tagUpper) !== -1 &&
        b.data.title.toUpperCase().indexOf(tagUpper) === -1
      ) {
        // In B's title but not A's - sort B first
        return -1;
      }
      if (
        a.data.description.toUpperCase().indexOf(tagUpper) !== -1 &&
        b.data.description.toUpperCase().indexOf(tagUpper) === -1
      ) {
        // In B's description but not A's - sort B first
        return -1;
      }
      // sort A first
      return 1;
    });

    // console.log("**" + tag + "** " + filteredCourses.map((course) => course.data.title));

    return {
      params: { tag: makeUrl(tag) },
      props: {
        tagUrl: makeUrl(tag),
        tagName: tag,
        webinars: filteredWebinars,
        courses: filteredCourses,
        books: filteredBooks,
        posts: filteredPosts,
      },
    };
  });
}

const { tagName, tagUrl, webinars, courses, books, posts } = Astro.props;

const hasWebinars = webinars.length > 0;
const hasCourses = courses.length > 0;
const hasBooks = books.length > 0;
const hasPosts = posts.length > 0;

const numberCategories = [hasWebinars, hasCourses, hasBooks, hasPosts].filter(
  (r) => r
).length;

const aimedAtText = forTags.includes(tagName)
  ? "for"
  : ageTags.includes(tagName)
    ? "about children aged "
    : "on";

const tagMeta = getTagMeta(tagName);

// console.log("WEBINARS: " + webinars.length);
---

<BaseLayout tagUrl={tagUrl} tagName={tagName}>
  <!-- 
    <div class="page-intro-image">
      <img
        srcset="imgs/page-image-620.jpg 620w, imgs/page-image-1080.jpg 1080w"
        sizes="(min-width: 1200px) 520px, (min-width: 780px) 780px, 100vw"
        src="imgs/page-image-620.jpg.jpg"
        alt="an image description for the visually impaired, also helps SEO"
      />
    </div> -->

  <div class="page-intro-wrapper">
    <div class="page-intro-image">
      <Picture
        src={tagMeta?.image}
        widths={[620, 1016, 2176]}
        sizes={`(min-width: 1185px) 1088px, (min-width: 780px) 754px, 100vw`}
        alt="Alt"
        pictureAttributes={{}}
      />
    </div>
    <div class="page-intro-text" set:html={tagMeta?.description} />
  </div>

  {
    numberCategories > 1 && (
      <div class="info-section-wrapper">
        <div class="info-text">
          <p>
            Click on a button to jump to our webinars, courses, books or blog posts
            {aimedAtText}
            <strong>{tagName}</strong>
          </p>
        </div>
        <div class="info-links">
          {hasWebinars && (
            <a href="#webinars" class="filter-webinars">
              Webinars
            </a>
          )}
          {hasCourses && (
            <a href="#courses" class="filter-courses">
              Courses
            </a>
          )}
          {hasBooks && (
            <a href="#books" class="filter-books">
              Books
            </a>
          )}
          {hasPosts && (
            <a href="#blog" class="filter-blog">
              Blog
            </a>
          )}
        </div>
      </div>
    )
  }

  {
    webinars.length > 0 && (
      <a name="webinars" class="anchor">
        <h2 class="section-title">
          <span class="webinars-section-title">Webinars</span> {aimedAtText}
          {tagName}
        </h2>
      </a>
    )
  }
  {webinars.map((webinar, index) => <WebinarSummary webinar={webinar} />)}

  {
    courses.length > 0 && (
      <a name="courses" class="anchor">
        <h2 class="section-title">
          <span class="courses-section-title">Courses</span> {aimedAtText}
          {tagName}
        </h2>
      </a>
    )
  }
  {courses.map((course) => <CourseSummary course={course.data} />)}

  {
    books.length > 0 && (
      <a name="books" class="anchor">
        <h2 class="section-title">
          <span class="books-section-title">Books</span> {aimedAtText}
          {tagName}
        </h2>
      </a>
    )
  }
  {books.map((book) => <BookSummary book={book.data} />)}

  {
    posts.length > 0 && (
      <a name="blog" class="anchor">
        <h2 class="section-title">
          <span class="blog-section-title">Blog posts</span> {aimedAtText}
          {tagName}
        </h2>
      </a>
    )
  }
  {posts.map((post) => <BlogSummary post={post.data} />)}
</BaseLayout>
