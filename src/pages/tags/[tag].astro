---
import getWebinars from "../../scripts/webinars";
import getCourses from "../../scripts/courses";

import {
  getTaggedBooks,
  getTaggedCourses,
  getTaggedPosts,
  getTaggedWebinars,
} from "../../scripts/getTaggedResources";

import { makeUrl } from "../../scripts/url";
import { allTags, ageTags, forTags, topicTags } from "../../scripts/tags";

import WebinarSummary from "../../components/webinar/WebinarSummary.astro";
import CourseSummary from "../../components/course/CourseSummary.astro";
import BlogSummary from "../../components/blog/BlogSummary.astro";
import BookSummary from "../../components/book/BookSummary.astro";

import { getOrderedPosts } from "../../scripts/blog";

import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getTagMeta } from "../../scripts/tagMeta";
import Picture from "astro/components/Picture.astro";

export async function getStaticPaths() {
  // Get ALL content
  const webinars = await getWebinars();
  const courses = await getCourses();
  const posts = await getOrderedPosts();

  // Sort newest book first
  const books = (await getCollection("books")).sort(
    (a, b) => b.data.id - a.data.id
  );
  function getAllResources(tags: string[]) {
    const taggedWebinars = getTaggedWebinars(webinars, tags);
    const taggedCourses = getTaggedCourses(courses, tags);
    const taggedBooks = getTaggedBooks(books, tags);
    const taggedPosts = getTaggedPosts(posts, tags).slice(0, 2);

    return {
      taggedWebinars: taggedWebinars,
      taggedBooks: taggedBooks,
      taggedCourses: taggedCourses,
      taggedPosts: taggedPosts,
    };
  }

  return allTags.map((tag: string) => {
    const { taggedWebinars, taggedCourses, taggedBooks, taggedPosts } =
      getAllResources([tag]);

    //  console.log("**" + tag + "** " + taggedCourses.map((course) => course.data.title));

    return {
      params: { tag: makeUrl(tag) },
      props: {
        tagUrl: makeUrl(tag),
        tagName: tag,
        webinars: taggedWebinars,
        courses: taggedCourses,
        books: taggedBooks,
        posts: taggedPosts,
      },
    };
  });
}

const { tagName, tagUrl, webinars, courses, books, posts } = Astro.props;

const hasWebinars = webinars.length > 0;
const hasCourses = courses.length > 0;
const hasBooks = books.length > 0;
const hasPosts = posts.length > 0;

const numberCategories = [hasWebinars, hasCourses, hasBooks, hasPosts].filter(
  (r) => r
).length;

const aimedAtText = forTags.includes(tagName)
  ? "for"
  : ageTags.includes(tagName)
    ? "about children aged "
    : "on";

const tagMeta = getTagMeta(tagName);

// console.log("WEBINARS: " + webinars.length);

const metaDescription =
  "Dr. Naomi Fisher's webinars, courses and books " +
  aimedAtText +
  " " +
  tagName;
---

<BaseLayout tagUrl={tagUrl} tagName={tagName} metaDescription={metaDescription}>
  {
    numberCategories > 1 && (
      <div class="info-section-wrapper">
        <div class="info-text">
          <p>
            Click on a button to jump to our webinars, courses, books or blog
            posts
            {aimedAtText}
            <strong>{tagName}</strong>
          </p>
        </div>
        <div class="info-links">
          {hasWebinars && (
            <a href="#webinars" class="filter-webinars">
              Webinars
            </a>
          )}
          {hasCourses && (
            <a href="#courses" class="filter-courses">
              Courses
            </a>
          )}
          {hasBooks && (
            <a href="#books" class="filter-books">
              Books
            </a>
          )}
          {hasPosts && (
            <a href="#blog" class="filter-blog">
              Blog
            </a>
          )}
        </div>
      </div>
    )
  }

  <div class="page-intro-wrapper">
    <div class="page-intro-image">
      <Picture
        src={tagMeta?.image}
        widths={[620, 1016, 2176]}
        sizes={`(min-width: 1185px) 1088px, (min-width: 780px) 754px, 100vw`}
        alt="Alt"
        pictureAttributes={{}}
      />
    </div>
    <div class="page-intro-text" set:html={tagMeta?.description} />
  </div>

  {
    webinars.length > 0 && (
      <a name="webinars" class="anchor">
        <h2 class="section-title">
          <span class="webinars-section-title">Webinars</span> {aimedAtText}
          {tagName}
        </h2>
      </a>
    )
  }
  {webinars.map((webinar, index) => <WebinarSummary webinar={webinar} />)}

  {
    courses.length > 0 && (
      <a name="courses" class="anchor">
        <h2 class="section-title">
          <span class="courses-section-title">Courses</span> {aimedAtText}
          {tagName}
        </h2>
      </a>
    )
  }
  {courses.map((course) => <CourseSummary course={course.data} />)}

  {
    books.length > 0 && (
      <a name="books" class="anchor">
        <h2 class="section-title">
          <span class="books-section-title">Books</span> {aimedAtText}
          {tagName}
        </h2>
      </a>
    )
  }
  {books.map((book) => <BookSummary book={book.data} />)}

  {
    posts.length > 0 && (
      <a name="blog" class="anchor">
        <h2 class="section-title">
          <span class="blog-section-title">Latest blog posts</span>{" "}
          {aimedAtText}
          {tagName}
        </h2>
      </a>
    )
  }
  {posts.map((post) => <BlogSummary post={post.data} />)}
</BaseLayout>
